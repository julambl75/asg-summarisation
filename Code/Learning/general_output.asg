

start -> s_group {
   :- count(X_user_user)@1, X_user_user > 2.
}
s_group -> {
  count(0).
}
s_group -> s ". " s_group {
  count(X_user_user + 1) :- count(X_user_user)@3.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
}
s -> np vp {
   :- property(gram_pers, third)@1, not property(gram_pers, third)@2, not property(tense, past).
   :- not property(gram_pers, third)@1, property(gram_pers, third)@2, not property(tense, past).
  subject :- property(subject, X_user_user)@1.
   :- not subject.
   :- property(singular, X_user_user)@1, property(plural, Y_user_user)@2.
   :- property(singular, X_user_user)@2, property(plural, Y_user_user)@1.
   :- property(subject, X_user_user), property(verb, Y_user_user), property(object, Z_user_user)@2, property(tense, T_user_user), not summary(X_user_user, Y_user_user, Z_user_user, T_user_user).
   :- property(subject, X_user_user), property(verb, Y_user_user), property(adverb, A_user_user)@2, property(tense, T_user_user), not summary(X_user_user, Y_user_user, A_user_user, T_user_user).
   :- property(subject, X_user_user), property(verb, Y_user_user), property(adjective, A_user_user)@2, property(tense, T_user_user), not summary(X_user_user, Y_user_user, A_user_user, T_user_user).
   :- property(subject, X_user_user), property(verb, Y_user_user), property(object, Z_user_user)@2, property(tense, T_user_user), property(adjective, A_user_user), not summary(X_user_user, Y_user_user, Z_user_user, T_user_user, A_user_user).
  movement(X_user_user, Y_user_user, Z_user_user, T_user_user) :- property(subject, X_user_user), property(verb, Y_user_user), property(direction, Z_user_user)@2, property(tense, T_user_user).
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@2.
  action(cat, be, black, present).
  summary(V0_user, V1_user, V2_user, present) :- action(V0_user, V1_user, V2_user, present).
}
vp -> vbz np rb {
  tense(present).
  gram_pers(third).
   :- property(vb_obj_match, X_user_user)@1, not property(vb_obj_match, X_user_user)@2.
  object :- property(object, X_user_user)@2.
  adjective :- property(adjective, X_user_user)@2.
  adverb :- property(adverb, X_user_user)@3.
   :- not object, not adjective, not adverb.
  pronoun :- property(pronoun, X_user_user)@2.
   :- pronoun.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@2.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@3.
}
vp -> vbp np rb {
  tense(present).
   :- property(vb_obj_match, X_user_user)@1, not property(vb_obj_match, X_user_user)@2.
  object :- property(object, X_user_user)@2.
  adjective :- property(adjective, X_user_user)@2.
  adverb :- property(adverb, X_user_user)@3.
   :- not object, not adjective, not adverb.
  pronoun :- property(pronoun, X_user_user)@2.
   :- pronoun.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@2.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@3.
}
vp -> vbd np rb {
  tense(past).
   :- property(vb_obj_match, X_user_user)@1, not property(vb_obj_match, X_user_user)@2.
  object :- property(object, X_user_user)@2.
  adjective :- property(adjective, X_user_user)@2.
  adverb :- property(adverb, X_user_user)@3.
   :- not object, not adjective, not adverb.
  pronoun :- property(pronoun, X_user_user)@2.
   :- pronoun.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@2.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@3.
}
np -> dt jj nn {
  singular(X_user_user) :- subject(X_user_user)@3.
  gram_pers(third).
   :- property(X_user_user, Y_user_user)@2, property(n_adj_match, X_user_user)@2, not property(can_have, X_user_user)@3.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@2.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@3.
}
np -> jj nns {
  plural(X_user_user) :- subject(X_user_user)@2.
  gram_pers(third).
   :- property(X_user_user, Y_user_user)@1, property(n_adj_match, X_user_user)@1, not property(can_have, X_user_user)@2.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@2.
}
np -> nnp {
  singular(X_user_user) :- subject(X_user_user)@1.
  gram_pers(third).
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
}
np -> nnps {
  plural(X_user_user) :- subject(X_user_user)@1.
  gram_pers(third).
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
}
np -> jj {
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
}
np -> prp {
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
}
np -> pp {
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
}
pp -> in np {
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@1.
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@2.
}
np -> {}
np -> {}
prp -> {
  vb_obj_match(no_obj).
  object(no_obj).
}
jj -> {}
dt -> {}
rb -> {}
in -> {}
vbd -> "was " vbg {
  singular(be).
  property(X_user_user, Y_user_user) :- property(X_user_user, Y_user_user)@2.
}
dt -> "the " {}
jj -> "black " {
  adjective(black).
}
nn -> "cat " {
  object(cat).
  subject(cat).
}
vbz -> "is " {
  verb(be).
}
dt -> "the " {}
jj -> "black " {
  adjective(black).
}
jj -> "red " {
  adjective(red).
}
nn -> "cat " {
  object(cat).
  subject(cat).
}
vbz -> "is " {
  verb(be).
}

#lexer -> {
}

#background {
  property(subject, X_user_user) :- subject(X_user_user).
  property(verb, X_user_user) :- verb(X_user_user).
  property(object, X_user_user) :- object(X_user_user).
  property(adjective, X_user_user) :- adjective(X_user_user).
  property(adverb, X_user_user) :- adverb(X_user_user).
  property(pronoun, X_user_user) :- pronoun(X_user_user).
  property(singular, X_user_user) :- singular(X_user_user).
  property(plural, X_user_user) :- plural(X_user_user).
  property(adjective, X_user_user) :- color(X_user_user).
  property(adjective, X_user_user) :- state(X_user_user).
  property(direction, X_user_user) :- direction(X_user_user).
  property(vb_obj_match, X_user_user) :- vb_obj_match(X_user_user).
  property(continuous, X_user_user) :- continuous(X_user_user).
  property(gram_pers, X_user_user) :- gram_pers(X_user_user).
  property(tense, X_user_user) :- tense(X_user_user).
  var_adjective(black).
  var_adjective(red).
  var_object(cat).
  var_subject(cat).
  var_verb(be).
}
