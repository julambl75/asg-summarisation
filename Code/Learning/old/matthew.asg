
start -> s_group {
   :- count(X)@1, X > 2.
}
s_group -> {
  count(0).
}
s_group -> s ". " s_group {
  count(X + 1) :- count(X)@3.
  property(X, Y) :- property(X, Y)@1.
}
s -> np vp {
   :- property(gram_pers, third)@1, not property(gram_pers, third)@2, not property(tense, past).
   :- not property(gram_pers, third)@1, property(gram_pers, third)@2, not property(tense, past).
  subject :- property(subject, X)@1.
   :- not subject.
   :- property(singular, X)@1, property(plural, Y)@2.
   :- property(singular, X)@2, property(plural, Y)@1.

   :- property(subject, X)@1, property(verb, Y), property(object, Z)@2, property(tense, T), not summary(X, Y, Z, T).
   :- property(subject, X)@1, property(verb, Y), property(object, Z1)@2, property(object, Z2)@2, property(tense, T), Z1 != Z2, not summary(X, Y, Z1, Z2, T).
   :- property(subject, X)@1, property(verb, Y), property(adverb, A)@2, property(tense, T), not summary(X, Y, A, T).
   :- property(subject, X)@1, property(verb, Y), property(adjective, A)@2, property(tense, T), not summary(X, Y, A, T).
   :- property(subject, X)@1, property(verb, Y), property(object, Z)@2, property(tense, T), property(adjective, A), not summary(X, Y, Z, T, A).

  property(X, Y) :- property(X, Y)@1.
  property(X, Y) :- property(X, Y)@2.

  action(matthew, be, logic, past).
  action(logic, be, brown, past).
  action(logic, be, formal, past).
%  summary(V4, V1, V2, past) :- var_subject(V4), action(_, V1, V2, past).
%  summary(V0, V1, V2, past, V4) :- var_adjective(V4), action(V0, V1, V2, past).

%   :- not property(subject, X)@1, summary(X, Y, Z, A1, A2, T).
   :- not property(verb, Y), summary(X, Y, Z, A1, A2, T).
%   :- not property(object, Z)@2, summary(X, Y, Z, A1, A2, T).
%   :- not property(tense, T), summary(X, Y, Z, A1, A2, T).
%   :- not property(adjective, A1), summary(X, Y, Z, A1, A2, T).
%   :- not property(adjective, A2), summary(X, Y, Z, A1, A2, T).
%   :-  A1 = A2, summary(X, Y, Z, A1, A2, T).
  summary(matthew, be, logic, past, brown, formal).
  summary(matthew, be, logic, past).
}
vp -> vbd np rb {
  tense(past).
   :- property(vb_obj_match, X)@1, not property(vb_obj_match, X)@2.
  object :- property(object, X)@2.
  adjective :- property(adjective, X)@2.
  adverb :- property(adverb, X)@3.
   :- not object, not adjective, not adverb.
  pronoun :- property(pronoun, X)@2.
   :- pronoun.
  property(X, Y) :- property(X, Y)@1.
  property(X, Y) :- property(X, Y)@2.
  property(X, Y) :- property(X, Y)@3.
}
np -> np cc np {
  property(X, Y) :- property(X, Y)@1.
  property(X, Y) :- property(X, Y)@2.
  property(X, Y) :- property(X, Y)@3.
}
np -> dt jj jj nn {
  singular(X) :- subject(X)@4.
  gram_pers(third).
   :- property(X, Y)@2, property(n_adj_match, X)@2, not property(can_have, X)@4.
   :- property(X, Y)@3, property(n_adj_match, X)@3, not property(can_have, X)@4.
   :- adjective(X)@2, adjective(X)@3.
  property(X, Y) :- property(X, Y)@1.
  property(X, Y) :- property(X, Y)@2.
  property(X, Y) :- property(X, Y)@3.
  property(X, Y) :- property(X, Y)@4.
}
np -> nn {
  singular(X) :- subject(X)@1.
  gram_pers(third).
  property(X, Y) :- property(X, Y)@1.
}
np -> jj nns {
  plural(X) :- subject(X)@2.
  gram_pers(third).
   :- property(X, Y)@1, property(n_adj_match, X)@1, not property(can_have, X)@2.
  property(X, Y) :- property(X, Y)@1.
  property(X, Y) :- property(X, Y)@2.
}
np -> nnp {
  singular(X) :- subject(X)@1.
  gram_pers(third).
  property(X, Y) :- property(X, Y)@1.
}
np -> nnps {
  plural(X) :- subject(X)@1.
  gram_pers(third).
  property(X, Y) :- property(X, Y)@1.
}
np -> jj {
  property(X, Y) :- property(X, Y)@1.
}
np -> prp {
  gram_pers(third).
  property(X, Y) :- property(X, Y)@1.
}
np -> pp {
  property(X, Y) :- property(X, Y)@1.
}
pp -> in np {
  property(X, Y) :- property(X, Y)@1.
  property(X, Y) :- property(X, Y)@2.
}
nn -> nn nn {
   :- object(X)@1, object(X)@2.
  property(X, Y) :- property(X, Y)@1.
  property(X, Y) :- property(X, Y)@2.
}
nnp -> nnp nnp {
   :- object(X)@1, object(X)@2.
  property(X, Y) :- property(X, Y)@1.
  property(X, Y) :- property(X, Y)@2.
}
prp -> {
  vb_obj_match(no_obj).
  object(no_obj).
  gram_pers(third).
}
jj -> {}
dt -> {}
rb -> {}
in -> {}
vbd -> "was " vbg {
  singular(be).
  property(X, Y) :- property(X, Y)@2.
}
cc -> "and " {}
dt -> "a " {}
dt -> "the " {}
jj -> "brown " {
  adjective(brown).
}
jj -> "formal " {
  adjective(formal).
}
nn -> "logic " {
  object(logic).
  subject(logic).
}
nn -> "matthew " {
  object(matthew).
  subject(matthew).
}
vbd -> "was " {
  verb(be).
}
cc -> "and " {}
dt -> "a " {}
dt -> "the " {}
jj -> "brown " {
  adjective(brown).
}
jj -> "formal " {
  adjective(formal).
}
jj -> "logical " {
  adjective(logical).
}
nn -> "logic " {
  object(logic).
  subject(logic).
}
nn -> "matthew " {
  object(matthew).
  subject(matthew).
}
nnp -> "matthew " {
  object(matthew).
  subject(matthew).
}
vbd -> "was " {
  verb(be).
}

#background {
  property(subject, X) :- subject(X).
  property(verb, X) :- verb(X).
  property(object, X) :- object(X).
  property(adjective, X) :- adjective(X).
  property(adverb, X) :- adverb(X).
  property(pronoun, X) :- pronoun(X).
  property(singular, X) :- singular(X).
  property(plural, X) :- plural(X).
  property(adjective, X) :- color(X).
  property(adjective, X) :- state(X).
  property(direction, X) :- direction(X).
  property(vb_obj_match, X) :- vb_obj_match(X).
  property(continuous, X) :- continuous(X).
  property(gram_pers, X) :- gram_pers(X).
  property(tense, X) :- tense(X).
}
